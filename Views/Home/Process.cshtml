@model MePostWebApp.Models.Poster

@{
    ViewBag.Title = "Calculation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
    <div class="col-md-12"> 
        <form action="/Home/Process" method="post" class="col-md-offset-3 col-md-6" style="margin-top:30px;"> 
            @Html.AntiForgeryToken()
            <div class="form-horizontal"> 
                @Html.ValidationSummary(true, "", new { @class = "text-danger" }) 
                <div class="form-group">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select class="form-control col-md-6" name="Country">
                            @foreach (var item in ViewBag.Table)
                            {
                                if (Model.Country != null && Model.Country == item.Country)
                                {
                                    <option value="@item.Country" selected>@item.Country</option>
                                }
                                else
                                {
                                    <option value="@item.Country">@item.Country</option>
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select class="form-control col-md-6" name="Type">
                            @if (Model.Type == null)
                            {
                                <option value="" disabled selected>Select type</option>
                                <option value="Docs">Docs</option>
                                <option value="Parcel">Parcel</option>
                            }
                            else if (Model.Type == "Docs")
                            {
                                <option value="Docs" selected>Docs</option>
                                <option value="Parcel">Parcel</option>
                            }
                            else
                            {
                                <option value="Docs">Docs</option>
                                <option value="Parcel" selected>Parcel</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="number" name="Length" value="" step="0.01" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="number" name="Width" value="" step="0.01" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="number" name="Height" value="" step="0.01" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="number" name="Weight" value="" step="0.01" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                    </div>
                </div> 
                <div class="form-group">
                    <div class="col-md-8 col-md-offset-4">
                        <button class="btn btn-success" type="submit">Calculate</button>
                    </div>
                </div>
            </div>
        </form>
        @if (ViewBag.Result != null)
        {
            <div class="col-md-6 col-md-offset-3" style="margin-top:30px;">
                <p class="text-success text-center jumbotron">
                    Country: @Model.Country <br />
                    Type: @Model.Type <br />
                    L x W x H: @Model.Length x @Model.Width x @Model.Height <br />
                    Weight: @Model.Weight
                    <br /><br/>
                    Стоимость: @ViewBag.Result
                </p>
            </div>
        }
        @if (ViewBag.Error != null)
        {
            <div class="col-md-6 col-md-offset-3" style="margin-top:50px;">
                <p class="text-success text-center jumbotron">Ошибка: @ViewBag.Error</p>
            </div>
        }

    </div>
</div>
@section Scripts {
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

    <script>
        // переопределение валидации на стороне клиента
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}
